# simple c project scope
snippet cpp_scope "C project scope" b
#include <iostream>

int main(int argc, char *argv[])
{
	${1:return 0;}
}
endsnippet

# simple c library scope
snippet h_scope "C library scope" b
#ifndef ${1:LIBNAME_H}
#define ${2:LIBNAME_H}

$3

#endif
endsnippet

# simple CPP library implementation scope
snippet cpph_scope "Cpp implementation for a library" b
#include <iostream>

#include "${1:libname.h}"

$2
endsnippet

# printf scope
snippet co "std::cout" b
std::cout << ${1:...};
endsnippet

# scanf scope
snippet ci "std::cin" b
std::cin >> ${1:...};
endsnippet

# general scope for function
snippet func "Cpp function scope" b
${1:T} ${2:func_name}(${3:...})
{
	${4:return T;}
}
endsnippet

# simple scope for general function
snippet gfunc "Cpp general function scope" b
template <class T>
${1:T} ${2:func_name}(${3:T __var})
{
	${4:return T;}
}
endsnippet

# if scope
snippet _if "if scope" b
if (${1:...})
{
	$2
}
endsnippet

# switch case scope
snippet _switch "switch case scope" b
switch (${1:...})
{
	case ${2:CONDITION}:
		$3
		break;
	default:
		$4
}
endsnippet

# for scope
snippet _for "for scope" b
for (${1:INIT}; ${2:COND}; ${3:INC})
{
	$4
}
endsnippet

# while scope
snippet _while "while scope" b
while (${1:COND})
{
	$2
}
endsnippet

# do_while scope
snippet _dwhile "do while scope" b
do
{
	$2
} while(${1:COND})
endsnippet
