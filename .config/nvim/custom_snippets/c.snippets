# simple c project scope
snippet c_scope "C project scope" b
#include <stdio.h>

int main(int argc, char *argv[])
{
	${1:return 0;}
}
endsnippet

# simple c library scope
snippet h_scope "C library scope" b
#ifndef $1
#define $2

$3

#endif
endsnippet

# simple c library implementation scope
snippet ch_scope "C implementation for a library" b
#include <stdio.h>

#include "${1:libname.h}"

$2
endsnippet

# printf scope
snippet pf "printf ()" b
printf("$1");
endsnippet

# scanf scope
snippet sf "scanf()" b
scanf("${1:%[type]}", ${2:varname});
endsnippet

# sprintf scope
snippet spf "sprintf()" b
sprintf(${1:char *retritct __s}, ${2:const char *restrict __format}, ${3:...});
endsnippet

# sscanf scope
snippet ssf "sscanf()" b
sscanf(${1:char *retritct __s}, ${2:const char *restrict __format}, ${3:...});
endsnippet

# fgets scope
snippet fg "fgets()" b
fgets(${1:char *restrict __s}, ${2:int __n}, ${3:FILE *restrict __stream});
endsnippet

# function scope
snippet func "C scope for a function" b
${1:T} ${2:func_name}(${3:...})
{
	${4:return T;}
}
endsnippet
