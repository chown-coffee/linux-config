# #include snippet
snippet h_i "#include snippet" b
#include <${1:lib}.h>
endsnippet

# #include custom snippet
snippet h_in "#include snippet custom" b
#include "${1:lib}.h"
endsnippet

# #define snippet
snippet h_d "#define snippet" b
#define ${1:...}
endsnippet

# #if snippet
snippet h_if "#if snippet" b
#if ${1:...}
$2
#endif
endsnippet

# simple c project scope
snippet c_s "C project scope" b
int
main(int argc, char *argv[])
{
	$2

	${1:return 0;}
}
endsnippet

snippet c_sc "C project scope" b
#include <stdio.h>

int
main(int argc, char *argv[])
{
	$2

	${1:return 0;}
}
endsnippet

# simple c library scope
snippet h_ "C library scope" b
#ifndef ${1:LIB}.H
#define ${2:LIB}.H

$3

#endif
endsnippet

# simple c library implementation scope
snippet ch_s "C implementation for a library" b
#include <stdio.h>

#include "${1:libname}.h"

$2
endsnippet

# printf scope
snippet c_p "printf ()" b
printf("$1");
endsnippet

snippet c_fp "fprintf () scope" b
fprintf(${1:FILE *restrict __stream}, ${2:const char *restrict __format});
endsnippet

snippet c_fpo "fprintf(stdout, ...) scope" b
fprintf(stdout, ${2:const char *restrict __format});
endsnippet

# scanf scope
snippet c_sf "scanf()" b
scanf("${1:%[type]}", ${2:varname});
endsnippet

# sprintf scope
snippet c_sp "sprintf()" b
sprintf(${1:char *retritct __s}, ${2:const char *restrict __format}, ${3:...});
endsnippet

# sscanf scope
snippet c_ss "sscanf()" b
sscanf(${1:char *retritct __s}, ${2:const char *restrict __format}, ${3:...});
endsnippet

# fgets scope
snippet c_fg "fgets()" b
fgets(${1:char *restrict __s}, ${2:int __n}, ${3:FILE *restrict __stream});
endsnippet

# fgets scope
snippet c_fg_ "fgets()" b
fgets(${1:char *restrict __s}, ${2:int __n}, ${3:FILE *restrict __stream});
${4:$1}[strcspn(${5:$1}, "\r\n")] = 0;
endsnippet

# fgets scope (non null)
snippet c_fgnn "fgets(@NonNull)" b
void
fgets_non_null(char *restrict str, int MAX_SIZE)
{
	while (str[0] == '\0' ||
				 str[0] == '\n' ||
				 str[0] == '\r')
		fgets(str, MAX_SIZE, stdin);

	// strtok(str, "\r\n");
	str[strcspn(str, "\r\n")] = 0;
}
endsnippet

snippet c_nc "ncurses init and end scope" b
initscr();

$1

endwin();
endsnippet

snippet c_re "refresh ncurses scope" b
refresh();
endsnippet

snippet c_wre "wrefresh ncurses scope" b
wrefresh(${1:WINDOW *win});
endsnippet

snippet c_pw "printw scope" b
printw(${1:const char *});
endsnippet

snippet c_wpw "wprintw scope" b
wprintw(${1:WINDOW *win}, ${2:const char *});
endsnippet

snippet c_mvpw "mvprintw scope" b
mvprintw(${1:int y} ,${2:int x} , ${3:const char *});
endsnippet

snippet c_mvwpw "mvwprintw scope" b
mvwprintw(${1:WINDOW *win}, ${2:int y} ,${3:int x} , ${4:const char *});
endsnippet

# function scope
snippet c_fn "C scope for a function" b
${1:T}
${2:func_name} (${3:...})
{
	return ${4:T};
}
endsnippet

# function scope only
snippet c_fns "C scope only for a function" b
${1:T}
${2:func_name} (${3:...});
endsnippet

# method scope
snippet c_me "C scope for a method" b
void
${1:method_name} (${2:...})
{
	$3
}
endsnippet

# method scope only
snippet c_mes "C scope only for a method" b
void
${1:method_name} (${2:...});
endsnippet

# struct scope
snippet c_st "C scope for a strcut" b
struct ${1:Struct_name}
{
	$2
};
endsnippet

# inline struct scope
snippet c_sti "C scope for an inline strcut" b
struct ${1:Struct_name} { $2 };
endsnippet

# inline struct (typedef) scope
snippet c_tst "C scope for a struct (typedef)" b
typedef struct ${1:Struct_name}
{
	$3
} ${2:St_alias};
endsnippet

# inline struct (typedef) scope
snippet c_tsti "C scope for an inline struct (typedef)" b
typedef struct ${1:Struct_name} { $3 } ${2:St_alias};
endsnippet

# macro implementation scope
snippet c_ma "C macro scope" b
${1:T}
(${2:macro_name}) (${3:...})
{
	$5

	return ${4:T};
}
endsnippet

# macro implementation scope only
snippet c_mas "C macro scope only" b
${1:T}
(${2:macro_name}) (${3:...});
endsnippet

# if scope
snippet c_if "if scope" b
if (${1:...}) {
	$2
}
endsnippet

# switch case scope
snippet c_sw "switch case scope" b
switch (${1:...}) {
	case ${2:...}:
		$3
		break;
	default:
		$4
}
endsnippet

# for scope
snippet c_f "for scope" b
for (${1:INIT}; ${2:COND}; ${3:INC}) {
	$4
}
endsnippet

# while scope
snippet c_w "while scope" b
while (${1:...}) {
	$2
}
endsnippet

# do_while scope
snippet c_dw "do while scope" b
do {
	$2
} while(${1:...})
endsnippet
